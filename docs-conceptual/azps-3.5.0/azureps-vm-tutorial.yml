### YamlMime:Tutorial
title: Erstellen von virtuellen Computern mit Azure PowerShell
metadata:
  title: Erstellen von virtuellen Computern mit Azure PowerShell
  description: Machen Sie sich mit Azure PowerShell vertraut, indem Sie virtuelle Computer erstellen.
  audience: Developer
  level: Beginner
  displayType: two-column
  interactive: azurepowershell
  ms.date: 12/13/2018
  ms.author: sttramer
  author: sptramer
  manager: carmonm
  ms.devlang: azure-powershell
  ms.prod: powershell
  ms.technology: azure-powershell
  ms.topic: tutorial
  clicktale: true
  ms.openlocfilehash: 71f250c0578e46888845f7a9a1ae4b74f7a38fab
  ms.sourcegitcommit: a321ef9d134c684fa24ababcbd898f86b00d9364
  ms.translationtype: HT
  ms.contentlocale: de-DE
  ms.lasthandoff: 02/20/2020
  ms.locfileid: "77477813"
items:
- durationInMinutes: 1
  content: >-
    In diesem Tutorial lernen Sie alle Schritte kennen, die beim Einrichten eines virtuellen Computers mit Azure PowerShell ausgeführt werden müssen. Dieses Tutorial behandelt außerdem Ausgabeabfragen, die erneute Verwendung von Azure-Ressourcen und die Ressourcenbereinigung.


    Dieses Tutorial kann über die interaktive Benutzeroberfläche von Azure Cloud Shell abgeschlossen werden. Alternativ können Sie lokal [Azure PowerShell installieren](install-az-ps.md).


    Verwenden Sie __STRG+UMSCHALT+V__ (unter macOS: __CMD+UMSCHALT+V__), um Tutorialtext in Azure Cloud Shell einzufügen.
- durationInMinutes: 1
  title: Anmelden
  content: >-
    Wenn Sie eine lokale Installation von Azure PowerShell verwenden, müssen Sie sich anmelden, bevor Sie weitere Schritte ausführen.


    ```powershell-interactive

    Connect-AzAccount

    ```


    Schließen Sie den Anmeldevorgang ab, indem Sie die auf Ihrem Terminal angezeigten Schritte ausführen.
- durationInMinutes: 1
  title: Erstellen einer Ressourcengruppe
  content: >-
    In Azure werden alle Ressourcen in einer Ressourcenverwaltungsgruppe zugeordnet. Mit Ressourcengruppen können logische Gruppierungen von Ressourcen bereitgestellt werden, sodass diese einfacher als Sammlung verwendet werden können.

    Im Rahmen dieses Tutorials werden alle erstellten Ressourcen in einer Gruppe namens `TutorialResources` zusammengefasst.


    ```powershell-interactive

    New-AzResourceGroup -Name TutorialResources -Location eastus

    ```


    ```Output

    ResourceGroupName : TutorialResources

    Location          : eastus

    ProvisioningState : Succeeded

    Tags              :

    ResourceId        : /subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/resourceGroups/TutorialResources

    ```
- durationInMinutes: 1
  title: Erstellen von Administratoranmeldeinformationen für den virtuellen Computer
  content: >-
    Bevor Sie einen neuen virtuellen Computer erstellen können, müssen Sie ein Anmeldeinformationsobjekt mit dem Benutzernamen und Kennwort für das Administratorkonto des virtuellen Windows-Computers erstellen.


    ```powershell-interactive

    $cred = Get-Credential -Message "Enter a username and password for the virtual machine."

    ```


    Geben Sie bei entsprechender Aufforderung den Benutzernamen und das Kennwort ein. Das Objekt für die Anmeldeinformationen wird im nächsten Schritt als Parameter übergeben.


    ```Output

    Windows PowerShell credential request.

    Enter a username and password for the virtual machine.

    User: tutorAdmin

    Password for user tutorAdmin: *********

    ```
- durationInMinutes: 4
  title: Erstellen eines virtuellen Computers
  content: >-
    Virtuelle Computer in Azure besitzen eine große Anzahl von Abhängigkeiten. Azure PowerShell erstellt diese Ressourcen auf der Grundlage der von Ihnen angegebenen Befehlszeilenargumente für Sie. Zur besseren Lesbarkeit verwenden wir die [PowerShell-Verteilung](/powershell/module/microsoft.powershell.core/about/about_splatting), um Parameter an die Azure PowerShell-Cmdlets zu übergeben.


    Erstellen Sie einen neuen virtuellen Computer unter Windows.


    ```powershell-interactive

    $vmParams = @{
      ResourceGroupName = 'TutorialResources'
      Name = 'TutorialVM1'
      Location = 'eastus'
      ImageName = 'Win2016Datacenter'
      PublicIpAddressName = 'tutorialPublicIp'
      Credential = $cred
      OpenPorts = 3389
    }

    $newVM1 = New-AzVM @vmParams

    ```

    Bei der Erstellung des virtuellen Computers werden die verwendeten Parameterwerte und die erstellten Azure-Ressourcen angezeigt.

    PowerShell zeigt eine Statusanzeige an, wie nachfolgend dargestellt:


    ```Output
     Creating Azure resources
      39% \
      [ooooooooooooooooooooooooooooooooooo                                                                 ]

      Creating TutorialVM1 virtual machine.
    ```


    Sobald der virtuelle Computer bereit ist, können wir die Ergebnisse im Azure-Portal oder durch Überprüfen der Variablen „\$newVM1“ anzeigen.


    ```powershell-interactive

    $newVM1

    ```


    ```Output

    ResourceGroupName : TutorialResources

    Id                : /subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/resourceGroups/TutorialResources/providers/Microsoft.Compute/virtualMachines/TutorialVM1

    VmId              : 12345678-9abc-def0-1234-56789abcedf0

    Name              : TutorialVM1

    Type              : Microsoft.Compute/virtualMachines

    Location          : eastus

    Tags              : {}

    HardwareProfile   : {VmSize}

    NetworkProfile    : {NetworkInterfaces}

    OSProfile         : {ComputerName, AdminUsername, WindowsConfiguration, Secrets}

    ProvisioningState : Succeeded

    StorageProfile    : {ImageReference, OsDisk, DataDisks}

    ```


    In geschweiften Klammern aufgeführte Eigenschaftswerte sind geschachtelte Objekte. Im nächsten Schritt wird gezeigt, wie Sie bestimmte Werte in diesen geschachtelten Objekten anzeigen.
- durationInMinutes: 5
  title: Abrufen von Informationen zum virtuellen Computer mit Abfragen
  content: >-
    Wir rufen nun ausführlichere Informationen zum soeben erstellten virtuellen Computer ab. In diesem Beispiel überprüfen wir den Namen des virtuellen Computers und des Administratorkontos, den bzw. das wir erstellt haben.


    ```powershell-interactive

    $newVM1.OSProfile | Select-Object ComputerName,AdminUserName

    ```


    ```Output

    ComputerName AdminUsername

    ------------ -------------

    TutorialVM1  tutorialAdmin

    ```


    Wir können andere Azure PowerShell-Befehle verwenden, um spezifische Informationen zur Netzwerkkonfiguration abzurufen.


    ```powershell-interactive

    $newVM1 | Get-AzNetworkInterface |
      Select-Object -ExpandProperty IpConfigurations |
        Select-Object Name,PrivateIpAddress
    ```


    In diesem Beispiel verwenden wir die PowerShell-Pipeline, um das Objekt „\$newVM1“ an das Cmdlet `Get-AzNetworkInterface` zu senden. Im resultierenden Netzwerkschnittstellenobjekt wählen wir das geschachtelte Objekt „IpConfigurations“ aus. Im Objekt „IpConfigurations“ wählen wir die Eigenschaften „Name“ und „PrivateIpAddress“ aus.


    ```Output

    Name        PrivateIpAddress

    ----        ----------------

    TutorialVM1 192.168.1.4

    ```


    Um zu überprüfen, ob der virtuelle Computer ausgeführt wird, müssen wir eine Verbindung über Remotedesktop herstellen. Dazu müssen wir die öffentliche IP-Adresse kennen.


    ```powershell-interactive

    $publicIp = Get-AzPublicIpAddress -Name tutorialPublicIp -ResourceGroupName TutorialResources


    $publicIp | Select-Object Name,IpAddress,@{label='FQDN';expression={$_.DnsSettings.Fqdn}}

    ```


    In diesem Beispiel verwenden wir `Get-AzPublicIpAddress` und speichern die Ergebnisse in der Variablen „\$publicIp“. In dieser Variablen wählen wir Eigenschaften aus und verwenden einen Ausdruck zum Abrufen der geschachtelten Eigenschaft „Fqdn“.


    ```Output

    Name             IpAddress           FQDN

    ----             ---------           ----

    tutorialPublicIp <PUBLIC_IP_ADDRESS> tutorialvm1-8a0999.eastus.cloudapp.azure.com

    ```


    Auf Ihrem lokalen Computer können Sie den folgenden Befehl ausführen, um über Remotedesktop eine Verbindung mit dem virtuellen Computer herzustellen.


    ```powershell-interactive

    mstsc.exe /v <PUBLIC_IP_ADDRESS>

    ```


    Weitere Informationen zum Abfragen von Objekteigenschaften finden Sie unter [Querying for Azure resources](./queries-azureps.md) (Abfragen von Azure-Ressourcen).
- durationInMinutes: 4
  title: Erstellen eines neuen virtuellen Computers im vorhandenen Subnetz
  content: >-
    Der zweite virtuelle Computer verwendet das vorhandene Subnetz.


    ```powershell-interactive

    $vm2Params = @{
      ResourceGroupName = 'TutorialResources'
      Name = 'TutorialVM2'
      ImageName = 'Win2016Datacenter'
      VirtualNetworkName = 'TutorialVM1'
      SubnetName = 'TutorialVM1'
      PublicIpAddressName = 'tutorialPublicIp2'
      Credential = $cred
      OpenPorts = 3389
    }

    $newVM2 = New-AzVM @vm2Params


    $newVM2

    ```


    ```Output

    ResourceGroupName        : TutorialResources

    Id                       : /subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/resourceGroups/TutorialResources/providers/Microsoft.Compute/virtualMachines/TutorialVM2

    VmId                     : 12345678-9abc-def0-1234-56789abcedf1

    Name                     : TutorialVM2

    Type                     : Microsoft.Compute/virtualMachines

    Location                 : eastus

    Tags                     : {}

    HardwareProfile          : {VmSize}

    NetworkProfile           : {NetworkInterfaces}

    OSProfile                : {ComputerName, AdminUsername, WindowsConfiguration, Secrets}

    ProvisioningState        : Succeeded

    StorageProfile           : {ImageReference, OsDisk, DataDisks}

    FullyQualifiedDomainName : tutorialvm2-dfa5af.eastus.cloudapp.azure.com

    ```


    Sie können einige Schritte überspringen, um die öffentliche IP-Adresse des neuen virtuellen Computers abzurufen, da sie in der Eigenschaft „FullyQualifiedDomainName“ des Objekts „\$newVM2“ zurückgegeben wird. Stellen Sie mit dem folgenden Befehl eine Verbindung über Remotedesktop her:


    ```powershell-interactive

    mstsc.exe /v $newVM2.FullyQualifiedDomainName

    ```
- durationInMinutes: 4
  title: Cleanup
  content: >-
    Das Tutorial ist abgeschlossen, und Sie sollten nun die erstellten Ressourcen bereinigen. Sie können mit dem Befehl `Remove-AzResource` einzelne Ressourcen löschen. Die sicherste Methode zum Entfernen aller Ressourcen in einer Ressourcengruppe ist jedoch das Löschen der Gruppe mithilfe des Befehls `Remove-AzResourceGroup`.


    ```powershell-interactive

    $job = Remove-AzResourceGroup -Name TutorialResources -Force -AsJob


    $job

    ```


    ```Output

    Id     Name            PSJobTypeName   State         HasMoreData     Location             Command

    --     ----            -------------   -----         -----------     --------             -------

    1      Long Running... AzureLongRun... Running       True            localhost            Remove-AzResource...

    ```


    Mit diesem Befehl werden die während des Tutorials erstellten Ressourcen gelöscht, und ihre Zuordnung wird garantiert in der richtigen Reihenfolge aufgehoben. Der Parameter `-AsJob` verhindert eine Blockierung durch PowerShell, während der Löschvorgang ausgeführt wird. Verwenden Sie den folgenden Befehl, um zu warten, bis der Löschvorgang abgeschlossen ist:


    ```powershell-interactive

    Wait-Job -Id $job.Id

    ```


    Nach der Bereinigung ist das Tutorial abgeschlossen. Lesen Sie weiter, um eine Zusammenfassung der gelernten Inhalte sowie Links zu Ressourcen anzuzeigen, die Sie bei den nächsten Schritten unterstützen.
- durationInMinutes: 1
  title: Zusammenfassung
  content: "\nGlückwunsch! Sie haben gelernt, wie Sie virtuelle Computer mit neuen oder vorhandenen Ressourcen erstellen, haben Ausdrücke und andere Azure PowerShell-Befehle zum Erfassen von Daten verwendet, die in Shellvariablen gespeichert werden, und einige der Ressourcen kennengelernt, die für virtuelle Azure-Computer erstellt werden.\n\nWie es weitergeht, hängt davon ab, wie Sie Azure PowerShell verwenden möchten. Es gibt zahlreiche Dokumente, in denen die in diesem Tutorial behandelten Features ausführlicher erläutert werden.\n\n### <a name=\"in-depth-azure-powershell-documentation\"></a>Ausführliche Azure PowerShell-Dokumentation\n\nUnter Umständen möchten Sie sich die vollständige [Azure PowerShell-Dokumentation](overview.md) genauer ansehen.\n\nWeitere Informationen zu den in diesem Tutorial verwendeten Befehlen finden Sie in den folgenden Artikeln:\n\n- [New-AzResourceGroup](/powershell/module/Az.resources/new-Azresourcegroup)\n- [Get-Credential](/powershell/module/microsoft.powershell.security/get-credential)\n- [New-AzVM](/powershell/module/Az.compute/new-Azvm)\n- [Select-Object](/powershell/module/microsoft.powershell.utility/select-object)\n- [Get-AzPublicIpAddress](/powershell/module/Az.network/get-AzPublicIpAddress)\n- [Remove-AzResourceGroup](/powershell/module/Az.resources/Remove-AzResourceGroup)\n- [Wait-Job](/powershell/module/microsoft.powershell.core/wait-job)\n\nEs gibt außerdem Artikel, in denen die in diesem Tutorial gezeigten Features ausführlicher beschrieben werden.\n\n- [PowerShell-Aufteilung](/powershell/module/microsoft.powershell.core/about/about_splatting)\n- [Abfragen](queries-azureps.md)\n- [Formatierung](formatting-output.md)\n- [Verwenden von PowerShell-Aufträgen](using-psjobs.md)\n\n### <a name=\"sample-scripts\"></a>Beispielskripts\n\nWenn Sie direkt mit bestimmten Aufgaben loslegen möchten, sehen Sie sich ein paar Beispielskripts an.\n\n- [Virtuelle Linux-Computer](/azure/virtual-machines/linux/powershell-samples?toc=%2fpowershell%2fmodule%2ftoc.json)\n- [Virtuelle Windows-Computer](/azure/virtual-machines/windows/powershell-samples?toc=%2fpowershell%2fmodule%2ftoc.json)\n- [Web-Apps](/azure/app-service-web/app-service-powershell-samples?toc=%2fpowershell%2fmodule%2ftoc.json)\n- [SQL-Datenbanken](/azure/sql-database/sql-database-powershell-samples?toc=%2fpowershell%2fmodule%2ftoc.json)\n- [Cosmos DB](/azure/cosmos-db/powershell-samples?toc=%2fpowershell%2fmodules%2ftoc.json)\n\n### <a name=\"feedback\"></a>Feedback\n\nWenn Sie Feedback oder Vorschläge senden oder Fragen stellen möchten, gibt es verschiedene Möglichkeiten zur Kontaktaufnahme.\n\n* `Send-Feedback` ist ein integrierter Befehl für Azure PowerShell, der die Übermittlung von Feedback in Freiform an das Team ermöglicht.\n* Reichen Sie eine Featureanforderung oder einen Fehlerbericht im [Azure PowerShell-Repository](https://github.com/Azure/azure-powershell/issues) ein.\n* Stellen Sie eine Frage, oder erhalten Sie ausführlichere Informationen, indem Sie ein Problem im [Azure PowerShell-Dokumentationsrepository](https://github.com/MicrosoftDocs/azure-docs-powershell/issues) melden.\n\nWir hoffen, dass Sie mit Azure PowerShell zufrieden sind."
